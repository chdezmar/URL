require "delegate"

class URL
  
  # The Response class is a deleegate to string which also contains metadata about the request.
  # These methods are also available
  # * body
  # * code - http code
  # * response - the original response object from whatever handler you chose
  # * time - time taken to make call
  # * success? - whether the http code is 2xx
  # * url - the URL the object was gotten from
  class Response < DelegateClass(String)
    # The time taken for the request
    # @returns [Integer]
    attr_reader :time
    
    # The http code return
    # @returns [Integer] eg. 200, 404, 500, 503
    attr_reader :code
    
    # The response object generated by the handler
    # @returns [Net::HTTPResponse,Typhoeus::Response]
    attr_reader :response
    
    # The url which generated this response
    # @returns [String]
    attr_reader :url
    
    # @param [String] body The body of the response object, main string
    # @param [Hash] args Additional arguments: :time,:code,:response,:url
    def initialize(str,args={})
      if str.is_a?(Hash)
        args = str
        str = args[:body]
      end
      
      raise unless str
      super(str)
      args.each do |key, value|
        instance_variable_set "@#{key}", value
      end
    end
    
    # Compares {Response#code} to 2xx
    # @returns [true,false]
    def success?
      return @successful if @successful
      
      (200..299).include?(code)
    end
  end
  
  # A hash where all keys are symbols
  class Mash < Hash
    # Set the value of a param
    def []=(k,v)
      k = k.to_s.to_sym unless k.is_a?(Symbol)
      super(k,v)
    end
    
    # Read the value of a param
    def [](k)
      k = k.to_s.to_sym unless k.is_a?(Symbol)
      super(k)
    end
  end
  
  class ParamsHash < Mash
    
    # Merges the array into a parameter string of the form <tt>?key=value&foo=bar</tt>
    def to_s
      return '' if empty?
      '?' + to_a.inject(Array.new) do |ret,param|
        key = param[0].to_s
        val = param[1]
        
        if param && val
          if val.is_a?(Hash)
            # TODO: Make this recusrive
            val.each do |param_key,param_val|
              param_key = CGI.escape("#{key}[#{param_key}]")
              param_val = CGI.escape(param_val.to_s)
              ret << %Q{#{param_key}=#{param_val}}
            end
          elsif val.is_a?(Array)
            # TODO: Make this recusrive
            val.each_with_index do |param_val,i|
              param_key = CGI.escape("#{key}[]")
              param_val = CGI.escape(param_val.to_s)
              ret << %Q{#{param_key}=#{param_val}}
            end
          else
            val = val.to_s

            val = CGI.escape(val)# if val =~ /(\/|\?|\s)/
            ret << %{#{param[0].to_s}=#{val}}
          end
        elsif param
          ret << param[0].to_s
        end
        ret
      end.join('&')
    end
  end
end